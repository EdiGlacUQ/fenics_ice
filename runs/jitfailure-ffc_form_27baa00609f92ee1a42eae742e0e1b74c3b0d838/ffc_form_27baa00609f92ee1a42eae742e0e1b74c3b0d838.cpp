// This code conforms with the UFC specification version 2017.1.0
// and was automatically generated by FFC version 2017.1.0.
// 
// This code was generated with the following parameters:
// 
//   add_tabulate_tensor_timing:     False
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2 -ffast-math -march=native'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   generate_dummy_tabulate_tensor: False
//   max_signature_length:           0
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      None
//   quadrature_degree:              None
//   quadrature_rule:                None
//   representation:                 'auto'
//   split:                          False

#include "ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise::ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise::~ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   optimize:          False
    //   precision:         16
    //   quadrature_degree: 1
    //   quadrature_rule:   'default'
    //   representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 1
    //   optimize:                    False
    //   precision:                   16
    //   quadrature_degree:           1
    //   quadrature_rule:             'default'
    //   representation:              'uflacs'
    
    // Quadrature rules
    static const double weights1[1] = { 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    static const double FE10_C0_Q1[1][1][3] = { { { 0.3333333333333333, 0.6666666666666665, 0.3333333333333334 } } };
    static const double FE10_C1_Q1[1][1][3] = { { { 0.3333333333333331, -0.3333333333333332, -0.6666666666666667 } } };
    static const double FE7_C0_D01_Q1[1][1][3] = { { { -1.0, 0.0, 1.0 } } };
    static const double FE7_C0_D10_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c2 = coordinate_dofs[1] * FE7_C0_D10_Q1[0][0][0] + coordinate_dofs[3] * FE7_C0_D10_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE7_C0_D10_Q1[0][0][0] + coordinate_dofs[2] * FE7_C0_D10_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE7_C0_D01_Q1[0][0][0] + coordinate_dofs[3] * FE7_C0_D01_Q1[0][0][1] + coordinate_dofs[5] * FE7_C0_D01_Q1[0][0][2];
    const double J_c1 = coordinate_dofs[0] * FE7_C0_D01_Q1[0][0][0] + coordinate_dofs[2] * FE7_C0_D01_Q1[0][0][1] + coordinate_dofs[4] * FE7_C0_D01_Q1[0][0][2];
    double w0_d1 = 0.0;
    for (int ic = 0; ic < 3; ++ic)
        w0_d1 += w[0][ic] * FE7_C0_D01_Q1[0][0][ic];
    const double J_c0 = coordinate_dofs[0] * FE7_C0_D10_Q1[0][0][0] + coordinate_dofs[2] * FE7_C0_D10_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE7_C0_D01_Q1[0][0][0] + coordinate_dofs[3] * FE7_C0_D01_Q1[0][0][1] + coordinate_dofs[5] * FE7_C0_D01_Q1[0][0][2];
    const double J_c1 = coordinate_dofs[0] * FE7_C0_D01_Q1[0][0][0] + coordinate_dofs[2] * FE7_C0_D01_Q1[0][0][1] + coordinate_dofs[4] * FE7_C0_D01_Q1[0][0][2];
    const double J_c2 = coordinate_dofs[1] * FE7_C0_D10_Q1[0][0][0] + coordinate_dofs[3] * FE7_C0_D10_Q1[0][0][1];
    double w0_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0 += w[0][ic] * FE7_C0_D10_Q1[0][0][ic];
    double sp[29];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c2 * (1.0 / sp[2]);
    sp[4] = J_c3 * (1.0 / sp[2]);
    sp[5] = J_c0 * J_c3;
    sp[6] = J_c1 * J_c2;
    sp[7] = sp[5] + -1 * sp[6];
    sp[8] = J_c0 / sp[7];
    sp[9] = w0_d1 * sp[8];
    sp[10] = -1 * J_c1 / sp[7];
    sp[11] = w0_d0 * sp[10];
    sp[12] = sp[9] + sp[11];
    sp[13] = sp[12] * sp[3];
    sp[14] = sp[12] * sp[4];
    sp[15] = J_c0 * (1.0 / sp[2]);
    sp[16] = J_c1 * (1.0 / sp[2]);
    sp[17] = J_c3 / sp[7];
    sp[18] = w0_d0 * sp[17];
    sp[19] = -1 * J_c2 / sp[7];
    sp[20] = w0_d1 * sp[19];
    sp[21] = sp[18] + sp[20];
    sp[22] = sp[21] * sp[15];
    sp[23] = sp[21] * sp[16];
    sp[24] = sp[22] + sp[13];
    sp[25] = sp[23] + sp[14];
    sp[26] = std::abs(sp[2]);
    sp[27] = sp[24] * sp[26];
    sp[28] = sp[25] * sp[26];
    double BS0[3] = {};
    double BS1[3] = {};
    // Only 1 quadrature point, no loop
    {
        const double fw0 = sp[27] * weights1[0];
        for (int i = 0; i < 3; ++i)
            BS0[i] += fw0 * FE10_C0_Q1[0][0][i];
        const double fw1 = sp[28] * weights1[0];
        for (int i = 0; i < 3; ++i)
            BS1[i] += fw1 * FE10_C1_Q1[0][0][i];
    }
    std::fill(A, A + 3, 0.0);
    for (int i = 0; i < 3; ++i)
        A[i] += BS0[i] + BS1[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise()
{
  return new ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise();
}


ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::~ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main()
{
    // Do nothing
}

const char * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::signature() const
{
    return "d9e591beb544815906d132b01de5d3054cfb8f24eddf11ed09a16ba23715ea2886cfc8922b65ea0c03b8c56b063246c2c7767297ba1b77430aa91004848e724c";
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::num_coefficients() const
{
    return 1;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0});
    return position[i];
}

ufc::finite_element * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_6a9261e4586e294872cfeb9091f723ea9704e642_finite_element_main();
}

ufc::dofmap * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_6a9261e4586e294872cfeb9091f723ea9704e642_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return create_ffc_element_32778141dc7c8bf6049e042a5ea8e63d9f6da12e_finite_element_main();
        break;
      }
    case 1:
      {
        return create_ffc_element_efa692f20f3033ad6416b892d098ead4bee3debc_finite_element_main();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return create_ffc_element_32778141dc7c8bf6049e042a5ea8e63d9f6da12e_dofmap_main();
        break;
      }
    case 1:
      {
        return create_ffc_element_efa692f20f3033ad6416b892d098ead4bee3debc_dofmap_main();
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::exterior_facet_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::vertex_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_cell_integral() const
{
    return new ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main::create_default_overlap_integral() const
{
    return 0;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main()
{
  return new ffc_form_27baa00609f92ee1a42eae742e0e1b74c3b0d838_form_main();
}

